[build-system]
build-backend = "setuptools.build_meta"
requires = [
    "setuptools>=61.2",
    "setuptools_scm",
]

[project]
authors = [{name = "Common Partial Wave Analysis", email = "compwa-admin@ep1.rub.de"}]
description = "Source code for the ComPWA Organization pages"
dynamic = ["version"]
license = {file = "LICENSE"}
maintainers = [{email = "compwa-admin@ep1.rub.de"}]
name = "compwa-report"
requires-python = ">=3.9"

[project.optional-dependencies]
dev = [
    "compwa-report[doc]",
    "compwa-report[jupyter]",
    "compwa-report[sty]",
    "compwa-report[test]",
    "sphinx-autobuild",
]
doc = [
    "compwa-report[notebooks]",
    "myst-nb",
    "sphinx",
    "sphinx-api-relink",
    "sphinx-book-theme",
    "sphinx-codeautolink[ipython]",
    "sphinx-comments",
    "sphinx-copybutton",
    "sphinx-design",
    "sphinx-hep-pdgref",
    "sphinx-pybtex-etal-style",
    "sphinx-remove-toctrees",
    "sphinx-thebe",
    "sphinx-togglebutton",
    "sphinxcontrib-bibtex >=2",
]
jupyter = [
    "compwa-report[notebooks]",
    "jupyterlab",
    "jupyterlab-code-formatter >=3.0.0",
    "jupyterlab-git",
    "jupyterlab-lsp",
    "jupyterlab-myst",
    "python-lsp-ruff",
    "python-lsp-server[rope]",
]
notebooks = [
    "pyproject-local-kernel",
]
sty = [
    "attrs",
    "compwa-report[types]",
    "nbformat",
    "ruff",
]
test = [
    "compwa-report[notebooks]",
    "nbmake",
    "pytest-env",
]
types = [
    "sphinx-api-relink",
]

[project.readme]
content-type = "text/markdown"
file = "README.md"

[project.urls]
Documentation = "https://compwa.github.io/report"
Source = "https://github.com/ComPWA/report"
Tracker = "https://github.com/ComPWA/report/issues"

[tool.setuptools]
include-package-data = false

[tool.setuptools_scm]
local_scheme = "no-local-version"
version_scheme = "only-version"
write_to = "version.py"

[tool.isort]
profile = "black"

[tool.pyright]
exclude = [
    "**/.git",
    "**/.ipynb_checkpoints",
    "**/.mypy_cache",
    "**/.pytest_cache",
    "**/.tox",
    "**/.venv/",
    "**/__pycache__",
    "**/_build",
    "**/exported_intensity_model.py",
]
reportGeneralTypeIssues = false
reportIncompatibleMethodOverride = false
reportMissingParameterType = false
reportMissingTypeArgument = false
reportMissingTypeStubs = false
reportOperatorIssue = false
reportOverlappingOverload = false
reportPrivateImportUsage = false
reportPrivateUsage = false
reportReturnType = false
reportUnboundVariable = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryComparison = false
reportUnnecessaryContains = false
reportUnnecessaryIsInstance = false
reportUntypedFunctionDecorator = false
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedImport = true
reportUnusedVariable = true
typeCheckingMode = "strict"

[tool.pytest.ini_options]
addopts = [
    "--color=yes",
    "--doctest-continue-on-failure",
    "--doctest-modules",
    "--durations=0",
    "--ignore-glob=*/.ipynb_checkpoints/*",
    "--ignore-glob=*/.virtual_documents/*",
    "--ignore=docs/_static",
    "--ignore=docs/conf.py",
    "--nbmake",
    "--nbmake-timeout=1200",
    "-k not docs/019/index.ipynb",
]
filterwarnings = [
    "error",
    "ignore:Passing a schema to Validator.iter_errors is deprecated.*:DeprecationWarning",
    "ignore:open_text is deprecated.*:DeprecationWarning",
    "ignore:read_text is deprecated.*:DeprecationWarning",
    "ignore:unclosed .*:ResourceWarning",
]
norecursedirs = [
    ".ipynb_checkpoints",
    ".virtual_documents",
    "_build",
]
testpaths = [
    "docs",
]

[tool.pytest_env]
EXECUTE_NB = "yes"

[tool.ruff]
extend-exclude = ["exported_intensity_model.py"]
extend-include = ["*.ipynb"]
preview = true
show-fixes = true

[tool.ruff.format]
docstring-code-format = true
line-ending = "lf"

[tool.ruff.lint]
ignore = [
    "ANN401",
    "ARG00",
    "COM812",
    "CPY001",
    "D101",
    "D102",
    "D103",
    "D105",
    "D107",
    "D203",
    "D213",
    "D407",
    "D416",
    "DOC",
    "E501",
    "FBT",
    "FURB101",
    "FURB103",
    "FURB140",
    "G004",
    "ISC001",
    "PLW1514",
    "PT001",
    "PTH",
    "SIM108",
    "SLF001",
]
select = ["ALL"]
task-tags = ["cspell"]

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["display"]

[tool.ruff.lint.flake8-comprehensions]
allow-dict-calls-with-keyword-arguments = true

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = [
    "ANN",
    "B018",
    "C90",
    "D",
    "E303",
    "E703",
    "N806",
    "N816",
    "PLR09",
    "PLR2004",
    "PLW0602",
    "PLW0603",
    "S101",
    "T20",
    "TCH00",
]
"docs/*" = [
    "INP001",
    "S101",
    "S113",
]
"docs/conf.py" = [
    "A001",
    "D100",
    "PLC2701",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.tomlsort]
all = false
ignore_case = true
in_place = true
sort_first = [
    "build-system",
    "project",
    "tool.setuptools",
    "tool.setuptools_scm",
]
spaces_indent_inline_array = 4
trailing_comma_inline_array = true

[tool.tox]
legacy_tox_ini = """
[tox]
envlist =
    docnb-force,
    linkcheck,
    sty,
skip_install = True
skip_missing_interpreters = True
skipsdist = True

[testenv]
passenv = *

[testenv:doc]
allowlist_externals =
    sphinx-build
commands =
    sphinx-build \
        --builder=html \
        --fail-on-warning \
        --keep-going \
        --show-traceback \
        docs/ docs/_build/html
description = Build documentation and API through Sphinx
setenv =
    PYTHONWARNINGS =
    TF_CPP_MIN_LOG_LEVEL = 3
    ZFIT_DISABLE_TF_WARNINGS = 1

[testenv:docnb]
base = doc
description = {[testenv:doc]description} with cached notebook execution
setenv =
    {[testenv:doc]setenv}
    EXECUTE_NB = yes

[testenv:docnb-force]
base = doc
description = {[testenv:doc]description} with notebook execution (no cache)
setenv =
    {[testenv:doc]setenv}
    FORCE_EXECUTE_NB = yes

[testenv:doclive]
allowlist_externals =
    sphinx-autobuild
commands =
    sphinx-autobuild \
        --ignore=docs/_build/ \
        --ignore=docs/_static/exported_intensity_model.py \
        --open-browser \
        --port=0 \
        --re-ignore='.*/__pycache__/.*' \
        --re-ignore='.*/.ipynb_checkpoints/.*' \
        --re-ignore='.*/.virtual_documents/.*' \
        --re-ignore='.*\\.csv' \
        --re-ignore='.*\\.gif' \
        --re-ignore='.*\\.gitignore' \
        --re-ignore='.*\\.gv' \
        --re-ignore='.*\\.inv' \
        --re-ignore='.*\\.json' \
        --re-ignore='.*\\.pickle' \
        --re-ignore='.*\\.png' \
        --re-ignore='.*\\.svg' \
        --re-ignore='.*\\.yaml' \
        --re-ignore='.*\\.yml' \
        --watch docs \
        docs/ docs/_build/html
description = Set up a server to directly preview changes to the HTML pages
setenv =
    PYTHONWARNINGS =
    ZFIT_DISABLE_TF_WARNINGS = 1

[testenv:docnblive]
base = doclive
description = {[testenv:doclive]description} with cached notebook execution
setenv =
    {[testenv:doclive]setenv}
    EXECUTE_NB = yes

[testenv:linkcheck]
allowlist_externals =
    sphinx-build
commands =
    sphinx-build \
        --builder=linkcheck \
        --show-traceback \
        docs/ docs/_build/linkcheck
description = Check external links in the documentation (requires internet connection)

[testenv:nb]
allowlist_externals =
    pytest
commands =
    pytest {posargs:docs}
description = Run all notebooks with pytest

[testenv:sty]
allowlist_externals =
    pre-commit
commands =
    pre-commit run --all-files {posargs}
description = Perform all linting, formatting, and spelling checks
setenv =
    SKIP = pyright
"""
